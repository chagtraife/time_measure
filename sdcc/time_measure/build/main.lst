                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Jun 20 2015) (MINGW64)
                                      4 ; This file was generated Sun Jul 02 20:33:26 2023
                                      5 ;--------------------------------------------------------
                                      6 	.module main
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _ISR_ET1
                                     13 	.globl _ISR_ET0
                                     14 	.globl _main
                                     15 	.globl _CY
                                     16 	.globl _AC
                                     17 	.globl _F0
                                     18 	.globl _RS1
                                     19 	.globl _RS0
                                     20 	.globl _OV
                                     21 	.globl _F1
                                     22 	.globl _P
                                     23 	.globl _PS
                                     24 	.globl _PT1
                                     25 	.globl _PX1
                                     26 	.globl _PT0
                                     27 	.globl _PX0
                                     28 	.globl _RD
                                     29 	.globl _WR
                                     30 	.globl _T1
                                     31 	.globl _T0
                                     32 	.globl _INT1
                                     33 	.globl _INT0
                                     34 	.globl _TXD
                                     35 	.globl _RXD
                                     36 	.globl _P3_7
                                     37 	.globl _P3_6
                                     38 	.globl _P3_5
                                     39 	.globl _P3_4
                                     40 	.globl _P3_3
                                     41 	.globl _P3_2
                                     42 	.globl _P3_1
                                     43 	.globl _P3_0
                                     44 	.globl _EA
                                     45 	.globl _ES
                                     46 	.globl _ET1
                                     47 	.globl _EX1
                                     48 	.globl _ET0
                                     49 	.globl _EX0
                                     50 	.globl _P2_7
                                     51 	.globl _P2_6
                                     52 	.globl _P2_5
                                     53 	.globl _P2_4
                                     54 	.globl _P2_3
                                     55 	.globl _P2_2
                                     56 	.globl _P2_1
                                     57 	.globl _P2_0
                                     58 	.globl _SM0
                                     59 	.globl _SM1
                                     60 	.globl _SM2
                                     61 	.globl _REN
                                     62 	.globl _TB8
                                     63 	.globl _RB8
                                     64 	.globl _TI
                                     65 	.globl _RI
                                     66 	.globl _P1_7
                                     67 	.globl _P1_6
                                     68 	.globl _P1_5
                                     69 	.globl _P1_4
                                     70 	.globl _P1_3
                                     71 	.globl _P1_2
                                     72 	.globl _P1_1
                                     73 	.globl _P1_0
                                     74 	.globl _TF1
                                     75 	.globl _TR1
                                     76 	.globl _TF0
                                     77 	.globl _TR0
                                     78 	.globl _IE1
                                     79 	.globl _IT1
                                     80 	.globl _IE0
                                     81 	.globl _IT0
                                     82 	.globl _P0_7
                                     83 	.globl _P0_6
                                     84 	.globl _P0_5
                                     85 	.globl _P0_4
                                     86 	.globl _P0_3
                                     87 	.globl _P0_2
                                     88 	.globl _P0_1
                                     89 	.globl _P0_0
                                     90 	.globl _B
                                     91 	.globl _ACC
                                     92 	.globl _PSW
                                     93 	.globl _IP
                                     94 	.globl _P3
                                     95 	.globl _IE
                                     96 	.globl _P2
                                     97 	.globl _SBUF
                                     98 	.globl _SCON
                                     99 	.globl _P1
                                    100 	.globl _TH1
                                    101 	.globl _TH0
                                    102 	.globl _TL1
                                    103 	.globl _TL0
                                    104 	.globl _TMOD
                                    105 	.globl _TCON
                                    106 	.globl _PCON
                                    107 	.globl _DPH
                                    108 	.globl _DPL
                                    109 	.globl _SP
                                    110 	.globl _P0
                                    111 	.globl _mode_tmp
                                    112 	.globl _range_mode
                                    113 	.globl _setDisplay_PARM_2
                                    114 	.globl _digitIdx
                                    115 	.globl _pointIdx
                                    116 	.globl _digitVal_4
                                    117 	.globl _digitVal_3
                                    118 	.globl _digitVal_2
                                    119 	.globl _digitVal_1
                                    120 	.globl _time_mode0
                                    121 	.globl _time_mode1
                                    122 	.globl _factor
                                    123 	.globl _led7
                                    124 	.globl _init_GPIO
                                    125 	.globl _init_TC1
                                    126 	.globl _init_TC0
                                    127 	.globl _readRangeSW
                                    128 	.globl _readResetButton
                                    129 	.globl _resetTime
                                    130 	.globl _update
                                    131 	.globl _setDisplay
                                    132 	.globl _display
                                    133 	.globl _delay_ms
                                    134 ;--------------------------------------------------------
                                    135 ; special function registers
                                    136 ;--------------------------------------------------------
                                    137 	.area RSEG    (ABS,DATA)
      000000                        138 	.org 0x0000
                           000080   139 _P0	=	0x0080
                           000081   140 _SP	=	0x0081
                           000082   141 _DPL	=	0x0082
                           000083   142 _DPH	=	0x0083
                           000087   143 _PCON	=	0x0087
                           000088   144 _TCON	=	0x0088
                           000089   145 _TMOD	=	0x0089
                           00008A   146 _TL0	=	0x008a
                           00008B   147 _TL1	=	0x008b
                           00008C   148 _TH0	=	0x008c
                           00008D   149 _TH1	=	0x008d
                           000090   150 _P1	=	0x0090
                           000098   151 _SCON	=	0x0098
                           000099   152 _SBUF	=	0x0099
                           0000A0   153 _P2	=	0x00a0
                           0000A8   154 _IE	=	0x00a8
                           0000B0   155 _P3	=	0x00b0
                           0000B8   156 _IP	=	0x00b8
                           0000D0   157 _PSW	=	0x00d0
                           0000E0   158 _ACC	=	0x00e0
                           0000F0   159 _B	=	0x00f0
                                    160 ;--------------------------------------------------------
                                    161 ; special function bits
                                    162 ;--------------------------------------------------------
                                    163 	.area RSEG    (ABS,DATA)
      000000                        164 	.org 0x0000
                           000080   165 _P0_0	=	0x0080
                           000081   166 _P0_1	=	0x0081
                           000082   167 _P0_2	=	0x0082
                           000083   168 _P0_3	=	0x0083
                           000084   169 _P0_4	=	0x0084
                           000085   170 _P0_5	=	0x0085
                           000086   171 _P0_6	=	0x0086
                           000087   172 _P0_7	=	0x0087
                           000088   173 _IT0	=	0x0088
                           000089   174 _IE0	=	0x0089
                           00008A   175 _IT1	=	0x008a
                           00008B   176 _IE1	=	0x008b
                           00008C   177 _TR0	=	0x008c
                           00008D   178 _TF0	=	0x008d
                           00008E   179 _TR1	=	0x008e
                           00008F   180 _TF1	=	0x008f
                           000090   181 _P1_0	=	0x0090
                           000091   182 _P1_1	=	0x0091
                           000092   183 _P1_2	=	0x0092
                           000093   184 _P1_3	=	0x0093
                           000094   185 _P1_4	=	0x0094
                           000095   186 _P1_5	=	0x0095
                           000096   187 _P1_6	=	0x0096
                           000097   188 _P1_7	=	0x0097
                           000098   189 _RI	=	0x0098
                           000099   190 _TI	=	0x0099
                           00009A   191 _RB8	=	0x009a
                           00009B   192 _TB8	=	0x009b
                           00009C   193 _REN	=	0x009c
                           00009D   194 _SM2	=	0x009d
                           00009E   195 _SM1	=	0x009e
                           00009F   196 _SM0	=	0x009f
                           0000A0   197 _P2_0	=	0x00a0
                           0000A1   198 _P2_1	=	0x00a1
                           0000A2   199 _P2_2	=	0x00a2
                           0000A3   200 _P2_3	=	0x00a3
                           0000A4   201 _P2_4	=	0x00a4
                           0000A5   202 _P2_5	=	0x00a5
                           0000A6   203 _P2_6	=	0x00a6
                           0000A7   204 _P2_7	=	0x00a7
                           0000A8   205 _EX0	=	0x00a8
                           0000A9   206 _ET0	=	0x00a9
                           0000AA   207 _EX1	=	0x00aa
                           0000AB   208 _ET1	=	0x00ab
                           0000AC   209 _ES	=	0x00ac
                           0000AF   210 _EA	=	0x00af
                           0000B0   211 _P3_0	=	0x00b0
                           0000B1   212 _P3_1	=	0x00b1
                           0000B2   213 _P3_2	=	0x00b2
                           0000B3   214 _P3_3	=	0x00b3
                           0000B4   215 _P3_4	=	0x00b4
                           0000B5   216 _P3_5	=	0x00b5
                           0000B6   217 _P3_6	=	0x00b6
                           0000B7   218 _P3_7	=	0x00b7
                           0000B0   219 _RXD	=	0x00b0
                           0000B1   220 _TXD	=	0x00b1
                           0000B2   221 _INT0	=	0x00b2
                           0000B3   222 _INT1	=	0x00b3
                           0000B4   223 _T0	=	0x00b4
                           0000B5   224 _T1	=	0x00b5
                           0000B6   225 _WR	=	0x00b6
                           0000B7   226 _RD	=	0x00b7
                           0000B8   227 _PX0	=	0x00b8
                           0000B9   228 _PT0	=	0x00b9
                           0000BA   229 _PX1	=	0x00ba
                           0000BB   230 _PT1	=	0x00bb
                           0000BC   231 _PS	=	0x00bc
                           0000D0   232 _P	=	0x00d0
                           0000D1   233 _F1	=	0x00d1
                           0000D2   234 _OV	=	0x00d2
                           0000D3   235 _RS0	=	0x00d3
                           0000D4   236 _RS1	=	0x00d4
                           0000D5   237 _F0	=	0x00d5
                           0000D6   238 _AC	=	0x00d6
                           0000D7   239 _CY	=	0x00d7
                                    240 ;--------------------------------------------------------
                                    241 ; overlayable register banks
                                    242 ;--------------------------------------------------------
                                    243 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        244 	.ds 8
                                    245 ;--------------------------------------------------------
                                    246 ; overlayable bit register bank
                                    247 ;--------------------------------------------------------
                                    248 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        249 bits:
      000000                        250 	.ds 1
                           008000   251 	b0 = bits[0]
                           008100   252 	b1 = bits[1]
                           008200   253 	b2 = bits[2]
                           008300   254 	b3 = bits[3]
                           008400   255 	b4 = bits[4]
                           008500   256 	b5 = bits[5]
                           008600   257 	b6 = bits[6]
                           008700   258 	b7 = bits[7]
                                    259 ;--------------------------------------------------------
                                    260 ; internal ram data
                                    261 ;--------------------------------------------------------
                                    262 	.area DSEG    (DATA)
      000000                        263 _led7::
      000000                        264 	.ds 10
      00000A                        265 _factor::
      00000A                        266 	.ds 2
      00000C                        267 _time_mode1::
      00000C                        268 	.ds 2
      00000E                        269 _time_mode0::
      00000E                        270 	.ds 2
      000010                        271 _digitVal_1::
      000010                        272 	.ds 2
      000012                        273 _digitVal_2::
      000012                        274 	.ds 2
      000014                        275 _digitVal_3::
      000014                        276 	.ds 2
      000016                        277 _digitVal_4::
      000016                        278 	.ds 2
      000018                        279 _pointIdx::
      000018                        280 	.ds 2
      00001A                        281 _digitIdx::
      00001A                        282 	.ds 2
      00001C                        283 _setDisplay_PARM_2:
      00001C                        284 	.ds 2
                                    285 ;--------------------------------------------------------
                                    286 ; overlayable items in internal ram 
                                    287 ;--------------------------------------------------------
                                    288 	.area	OSEG    (OVR,DATA)
                                    289 ;--------------------------------------------------------
                                    290 ; Stack segment in internal ram 
                                    291 ;--------------------------------------------------------
                                    292 	.area	SSEG
      000000                        293 __start__stack:
      000000                        294 	.ds	1
                                    295 
                                    296 ;--------------------------------------------------------
                                    297 ; indirectly addressable internal ram data
                                    298 ;--------------------------------------------------------
                                    299 	.area ISEG    (DATA)
                                    300 ;--------------------------------------------------------
                                    301 ; absolute internal ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area IABS    (ABS,DATA)
                                    304 	.area IABS    (ABS,DATA)
                                    305 ;--------------------------------------------------------
                                    306 ; bit data
                                    307 ;--------------------------------------------------------
                                    308 	.area BSEG    (BIT)
      000000                        309 _range_mode::
      000000                        310 	.ds 1
      000001                        311 _mode_tmp::
      000001                        312 	.ds 1
                                    313 ;--------------------------------------------------------
                                    314 ; paged external ram data
                                    315 ;--------------------------------------------------------
                                    316 	.area PSEG    (PAG,XDATA)
                                    317 ;--------------------------------------------------------
                                    318 ; external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area XSEG    (XDATA)
                                    321 ;--------------------------------------------------------
                                    322 ; absolute external ram data
                                    323 ;--------------------------------------------------------
                                    324 	.area XABS    (ABS,XDATA)
                                    325 ;--------------------------------------------------------
                                    326 ; external initialized ram data
                                    327 ;--------------------------------------------------------
                                    328 	.area XISEG   (XDATA)
                                    329 	.area HOME    (CODE)
                                    330 	.area GSINIT0 (CODE)
                                    331 	.area GSINIT1 (CODE)
                                    332 	.area GSINIT2 (CODE)
                                    333 	.area GSINIT3 (CODE)
                                    334 	.area GSINIT4 (CODE)
                                    335 	.area GSINIT5 (CODE)
                                    336 	.area GSINIT  (CODE)
                                    337 	.area GSFINAL (CODE)
                                    338 	.area CSEG    (CODE)
                                    339 ;--------------------------------------------------------
                                    340 ; interrupt vector 
                                    341 ;--------------------------------------------------------
                                    342 	.area HOME    (CODE)
      000000                        343 __interrupt_vect:
      000000 02r00r00         [24]  344 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  345 	reti
      000004                        346 	.ds	7
      00000B 02r03r26         [24]  347 	ljmp	_ISR_ET0
      00000E                        348 	.ds	5
      000013 32               [24]  349 	reti
      000014                        350 	.ds	7
      00001B 02r03r7E         [24]  351 	ljmp	_ISR_ET1
                                    352 ;--------------------------------------------------------
                                    353 ; global & static initialisations
                                    354 ;--------------------------------------------------------
                                    355 	.area HOME    (CODE)
                                    356 	.area GSINIT  (CODE)
                                    357 	.area GSFINAL (CODE)
                                    358 	.area GSINIT  (CODE)
                                    359 	.globl __sdcc_gsinit_startup
                                    360 	.globl __sdcc_program_startup
                                    361 	.globl __start__stack
                                    362 	.globl __mcs51_genXINIT
                                    363 	.globl __mcs51_genXRAMCLEAR
                                    364 	.globl __mcs51_genRAMCLEAR
                                    365 ;	src/main.c:36: uint8_t led7[10] = { 0x84, 0x9F, 0xC8, 0x89, 0x93, 0xA1, 0xA0, 0x8F, 0x80, 0x81 };
      000000 75*00 84         [24]  366 	mov	_led7,#0x84
      000003 75*01 9F         [24]  367 	mov	(_led7 + 0x0001),#0x9F
      000006 75*02 C8         [24]  368 	mov	(_led7 + 0x0002),#0xC8
      000009 75*03 89         [24]  369 	mov	(_led7 + 0x0003),#0x89
      00000C 75*04 93         [24]  370 	mov	(_led7 + 0x0004),#0x93
      00000F 75*05 A1         [24]  371 	mov	(_led7 + 0x0005),#0xA1
      000012 75*06 A0         [24]  372 	mov	(_led7 + 0x0006),#0xA0
      000015 75*07 8F         [24]  373 	mov	(_led7 + 0x0007),#0x8F
      000018 75*08 80         [24]  374 	mov	(_led7 + 0x0008),#0x80
      00001B 75*09 81         [24]  375 	mov	(_led7 + 0x0009),#0x81
                                    376 ;	src/main.c:42: unsigned int factor = 100;
      00001E 75*0A 64         [24]  377 	mov	_factor,#0x64
      000021 75*0B 00         [24]  378 	mov	(_factor + 1),#0x00
                                    379 ;	src/main.c:46: unsigned int time_mode1 = 0;
      000024 E4               [12]  380 	clr	a
      000025 F5*0C            [12]  381 	mov	_time_mode1,a
      000027 F5*0D            [12]  382 	mov	(_time_mode1 + 1),a
                                    383 ;	src/main.c:47: unsigned int time_mode0 = 0;
      000029 F5*0E            [12]  384 	mov	_time_mode0,a
      00002B F5*0F            [12]  385 	mov	(_time_mode0 + 1),a
                                    386 ;	src/main.c:48: unsigned int digitVal_1, digitVal_2, digitVal_3, digitVal_4 = 0;
      00002D F5*16            [12]  387 	mov	_digitVal_4,a
      00002F F5*17            [12]  388 	mov	(_digitVal_4 + 1),a
                                    389 ;	src/main.c:49: unsigned int pointIdx = 0;
      000031 F5*18            [12]  390 	mov	_pointIdx,a
      000033 F5*19            [12]  391 	mov	(_pointIdx + 1),a
                                    392 ;	src/main.c:50: unsigned int digitIdx = 1; // range in 1-4
      000035 75*1A 01         [24]  393 	mov	_digitIdx,#0x01
                                    394 ;	1-genFromRTrack replaced	mov	(_digitIdx + 1),#0x00
      000038 F5*1B            [12]  395 	mov	(_digitIdx + 1),a
                                    396 ;	src/main.c:41: __bit range_mode = 1;
      00003A D2*00            [12]  397 	setb	_range_mode
                                    398 	.area GSFINAL (CODE)
      000000 02r00r1E         [24]  399 	ljmp	__sdcc_program_startup
                                    400 ;--------------------------------------------------------
                                    401 ; Home
                                    402 ;--------------------------------------------------------
                                    403 	.area HOME    (CODE)
                                    404 	.area HOME    (CODE)
      00001E                        405 __sdcc_program_startup:
      00001E 02r00r00         [24]  406 	ljmp	_main
                                    407 ;	return from main will return to caller
                                    408 ;--------------------------------------------------------
                                    409 ; code
                                    410 ;--------------------------------------------------------
                                    411 	.area CSEG    (CODE)
                                    412 ;------------------------------------------------------------
                                    413 ;Allocation info for local variables in function 'main'
                                    414 ;------------------------------------------------------------
                                    415 ;	src/main.c:68: void main (void)
                                    416 ;	-----------------------------------------
                                    417 ;	 function main
                                    418 ;	-----------------------------------------
      000000                        419 _main:
                           000007   420 	ar7 = 0x07
                           000006   421 	ar6 = 0x06
                           000005   422 	ar5 = 0x05
                           000004   423 	ar4 = 0x04
                           000003   424 	ar3 = 0x03
                           000002   425 	ar2 = 0x02
                           000001   426 	ar1 = 0x01
                           000000   427 	ar0 = 0x00
                                    428 ;	src/main.c:70: readRangeSW();
      000000 12r00r6B         [24]  429 	lcall	_readRangeSW
                                    430 ;	src/main.c:71: init_GPIO();
      000003 12r00r41         [24]  431 	lcall	_init_GPIO
                                    432 ;	src/main.c:74: TMOD = 0x11;
      000006 75 89 11         [24]  433 	mov	_TMOD,#0x11
                                    434 ;	src/main.c:76: ET0 = 1;
      000009 D2 A9            [12]  435 	setb	_ET0
                                    436 ;	src/main.c:77: if (range_mode == 1) {
      00000B 30*00 08         [24]  437 	jnb	_range_mode,00102$
                                    438 ;	src/main.c:78: TH0 = 0xD8;
      00000E 75 8C D8         [24]  439 	mov	_TH0,#0xD8
                                    440 ;	src/main.c:79: TL0 = 0xF0;
      000011 75 8A F0         [24]  441 	mov	_TL0,#0xF0
      000014 80 06            [24]  442 	sjmp	00103$
      000016                        443 00102$:
                                    444 ;	src/main.c:81: TH0 = 0xFC;
      000016 75 8C FC         [24]  445 	mov	_TH0,#0xFC
                                    446 ;	src/main.c:82: TL0 = 0x2F;
      000019 75 8A 2F         [24]  447 	mov	_TL0,#0x2F
      00001C                        448 00103$:
                                    449 ;	src/main.c:85: PT0 = 1;
      00001C D2 B9            [12]  450 	setb	_PT0
                                    451 ;	src/main.c:86: TR0 = 1;         //Khoi dong timer1
      00001E D2 8C            [12]  452 	setb	_TR0
                                    453 ;	src/main.c:87: ET0 = 1;         //Ngat timer1
      000020 D2 A9            [12]  454 	setb	_ET0
                                    455 ;	src/main.c:89: ET1 = 1;
      000022 D2 AB            [12]  456 	setb	_ET1
                                    457 ;	src/main.c:90: TH1 = 0xF8;
      000024 75 8D F8         [24]  458 	mov	_TH1,#0xF8
                                    459 ;	src/main.c:91: TL1 = 0x30;
      000027 75 8B 30         [24]  460 	mov	_TL1,#0x30
                                    461 ;	src/main.c:92: TR1 = 1;
      00002A D2 8E            [12]  462 	setb	_TR1
                                    463 ;	src/main.c:93: ET1 = 1;
      00002C D2 AB            [12]  464 	setb	_ET1
                                    465 ;	src/main.c:95: EA = 1;          // cho phep ngat toan cuc
      00002E D2 AF            [12]  466 	setb	_EA
                                    467 ;	src/main.c:98: update();
      000030 12r00r9A         [24]  468 	lcall	_update
                                    469 ;	src/main.c:99: while (1)
      000033                        470 00105$:
                                    471 ;	src/main.c:101: readRangeSW();
      000033 12r00r6B         [24]  472 	lcall	_readRangeSW
                                    473 ;	src/main.c:102: readResetButton();
      000036 12r00r7E         [24]  474 	lcall	_readResetButton
                                    475 ;	src/main.c:103: delay_ms(2);
      000039 90 00 02         [24]  476 	mov	dptr,#0x0002
      00003C 12r02rFB         [24]  477 	lcall	_delay_ms
      00003F 80 F2            [24]  478 	sjmp	00105$
                                    479 ;------------------------------------------------------------
                                    480 ;Allocation info for local variables in function 'init_GPIO'
                                    481 ;------------------------------------------------------------
                                    482 ;	src/main.c:107: void init_GPIO(void)
                                    483 ;	-----------------------------------------
                                    484 ;	 function init_GPIO
                                    485 ;	-----------------------------------------
      000041                        486 _init_GPIO:
                                    487 ;	src/main.c:109: RESET = 0;
      000041 C2 B7            [12]  488 	clr	_P3_7
                                    489 ;	src/main.c:110: COM = 1;
      000043 D2 B1            [12]  490 	setb	_P3_1
                                    491 ;	src/main.c:111: RANGE_SW = 1;
      000045 D2 B0            [12]  492 	setb	_P3_0
      000047 22               [24]  493 	ret
                                    494 ;------------------------------------------------------------
                                    495 ;Allocation info for local variables in function 'init_TC1'
                                    496 ;------------------------------------------------------------
                                    497 ;	src/main.c:115: void init_TC1(void)
                                    498 ;	-----------------------------------------
                                    499 ;	 function init_TC1
                                    500 ;	-----------------------------------------
      000048                        501 _init_TC1:
                                    502 ;	src/main.c:117: ET1 = 1;         // cho phep ngat timer 0
      000048 D2 AB            [12]  503 	setb	_ET1
                                    504 ;	src/main.c:119: TH1 = 0xF8;      //Nap gia tri bat dau 8bit
      00004A 75 8D F8         [24]  505 	mov	_TH1,#0xF8
                                    506 ;	src/main.c:120: TL1 = 0x30;
      00004D 75 8B 30         [24]  507 	mov	_TL1,#0x30
                                    508 ;	src/main.c:121: TR1 = 0;         //Khoi dong timer0
      000050 C2 8E            [12]  509 	clr	_TR1
                                    510 ;	src/main.c:122: ET1 = 1;         //Ngat timer0
      000052 D2 AB            [12]  511 	setb	_ET1
                                    512 ;	src/main.c:123: EA = 1;          // cho phep ngat toan cuc
      000054 D2 AF            [12]  513 	setb	_EA
      000056 22               [24]  514 	ret
                                    515 ;------------------------------------------------------------
                                    516 ;Allocation info for local variables in function 'init_TC0'
                                    517 ;------------------------------------------------------------
                                    518 ;	src/main.c:127: void init_TC0(void)
                                    519 ;	-----------------------------------------
                                    520 ;	 function init_TC0
                                    521 ;	-----------------------------------------
      000057                        522 _init_TC0:
                                    523 ;	src/main.c:129: ET0 = 1;         // cho phep ngat timer 1
      000057 D2 A9            [12]  524 	setb	_ET0
                                    525 ;	src/main.c:130: TMOD = 0x11;    //Use Timer1 at 16-bit timer mode.
      000059 75 89 11         [24]  526 	mov	_TMOD,#0x11
                                    527 ;	src/main.c:131: TH0 = 0xFC;
      00005C 75 8C FC         [24]  528 	mov	_TH0,#0xFC
                                    529 ;	src/main.c:132: TL0 = 0x2F;
      00005F 75 8A 2F         [24]  530 	mov	_TL0,#0x2F
                                    531 ;	src/main.c:133: PT0 = 1;
      000062 D2 B9            [12]  532 	setb	_PT0
                                    533 ;	src/main.c:134: TR0 = 1;         //Khoi dong timer1
      000064 D2 8C            [12]  534 	setb	_TR0
                                    535 ;	src/main.c:135: ET0 = 1;         //Ngat timer1
      000066 D2 A9            [12]  536 	setb	_ET0
                                    537 ;	src/main.c:136: EA = 1;          // cho phep ngat toan cuc
      000068 D2 AF            [12]  538 	setb	_EA
      00006A 22               [24]  539 	ret
                                    540 ;------------------------------------------------------------
                                    541 ;Allocation info for local variables in function 'readRangeSW'
                                    542 ;------------------------------------------------------------
                                    543 ;	src/main.c:139: void readRangeSW(void)
                                    544 ;	-----------------------------------------
                                    545 ;	 function readRangeSW
                                    546 ;	-----------------------------------------
      00006B                        547 _readRangeSW:
                                    548 ;	src/main.c:141: if (range_mode != RANGE_SW) {
      00006B A2*00            [12]  549 	mov	c,_range_mode
      00006D 20 B0 01         [24]  550 	jb	_P3_0,00108$
      000070 B3               [12]  551 	cpl	c
      000071                        552 00108$:
      000071 40 0A            [24]  553 	jc	00103$
                                    554 ;	src/main.c:142: delay_ms(2);
      000073 90 00 02         [24]  555 	mov	dptr,#0x0002
      000076 12r02rFB         [24]  556 	lcall	_delay_ms
                                    557 ;	src/main.c:143: mode_tmp = RANGE_SW;
      000079 A2 B0            [12]  558 	mov	c,_P3_0
      00007B 92*01            [24]  559 	mov	_mode_tmp,c
      00007D                        560 00103$:
      00007D 22               [24]  561 	ret
                                    562 ;------------------------------------------------------------
                                    563 ;Allocation info for local variables in function 'readResetButton'
                                    564 ;------------------------------------------------------------
                                    565 ;	src/main.c:161: void readResetButton()
                                    566 ;	-----------------------------------------
                                    567 ;	 function readResetButton
                                    568 ;	-----------------------------------------
      00007E                        569 _readResetButton:
                                    570 ;	src/main.c:163: if (RESET == 1) {
      00007E 30 B7 0C         [24]  571 	jnb	_P3_7,00105$
                                    572 ;	src/main.c:164: delay_ms(1);
      000081 90 00 01         [24]  573 	mov	dptr,#0x0001
      000084 12r02rFB         [24]  574 	lcall	_delay_ms
                                    575 ;	src/main.c:165: if (RESET == 1){
      000087 30 B7 03         [24]  576 	jnb	_P3_7,00105$
                                    577 ;	src/main.c:166: resetTime();
      00008A 02r00r8E         [24]  578 	ljmp	_resetTime
      00008D                        579 00105$:
      00008D 22               [24]  580 	ret
                                    581 ;------------------------------------------------------------
                                    582 ;Allocation info for local variables in function 'resetTime'
                                    583 ;------------------------------------------------------------
                                    584 ;	src/main.c:171: void resetTime()
                                    585 ;	-----------------------------------------
                                    586 ;	 function resetTime
                                    587 ;	-----------------------------------------
      00008E                        588 _resetTime:
                                    589 ;	src/main.c:173: time_mode1 = 0;
      00008E E4               [12]  590 	clr	a
      00008F F5*0C            [12]  591 	mov	_time_mode1,a
      000091 F5*0D            [12]  592 	mov	(_time_mode1 + 1),a
                                    593 ;	src/main.c:174: time_mode0 = 0;
      000093 F5*0E            [12]  594 	mov	_time_mode0,a
      000095 F5*0F            [12]  595 	mov	(_time_mode0 + 1),a
                                    596 ;	src/main.c:175: update();
      000097 02r00r9A         [24]  597 	ljmp	_update
                                    598 ;------------------------------------------------------------
                                    599 ;Allocation info for local variables in function 'update'
                                    600 ;------------------------------------------------------------
                                    601 ;	src/main.c:178: void update(void)
                                    602 ;	-----------------------------------------
                                    603 ;	 function update
                                    604 ;	-----------------------------------------
      00009A                        605 _update:
                                    606 ;	src/main.c:180: if (range_mode != mode_tmp){
      00009A A2*00            [12]  607 	mov	c,_range_mode
      00009C 20*01 01         [24]  608 	jb	_mode_tmp,00120$
      00009F B3               [12]  609 	cpl	c
      0000A0                        610 00120$:
      0000A0 50 03            [24]  611 	jnc	00121$
      0000A2 02r01r2F         [24]  612 	ljmp	00105$
      0000A5                        613 00121$:
                                    614 ;	src/main.c:181: if (mode_tmp == 1) {
      0000A5 30*01 5C         [24]  615 	jnb	_mode_tmp,00102$
                                    616 ;	src/main.c:182: factor = 100;
      0000A8 75*0A 64         [24]  617 	mov	_factor,#0x64
      0000AB 75*0B 00         [24]  618 	mov	(_factor + 1),#0x00
                                    619 ;	src/main.c:183: time_mode1 = ((time_mode1 / 1000) % 10) * 1000 + (time_mode0 / 10) % 1000;
      0000AE 75*00 E8         [24]  620 	mov	__divuint_PARM_2,#0xE8
      0000B1 75*01 03         [24]  621 	mov	(__divuint_PARM_2 + 1),#0x03
      0000B4 85*0C 82         [24]  622 	mov	dpl,_time_mode1
      0000B7 85*0D 83         [24]  623 	mov	dph,(_time_mode1 + 1)
      0000BA 12r00r00         [24]  624 	lcall	__divuint
      0000BD 75*00 0A         [24]  625 	mov	__moduint_PARM_2,#0x0A
      0000C0 75*01 00         [24]  626 	mov	(__moduint_PARM_2 + 1),#0x00
      0000C3 12r00r00         [24]  627 	lcall	__moduint
      0000C6 85 82*00         [24]  628 	mov	__mulint_PARM_2,dpl
      0000C9 85 83*01         [24]  629 	mov	(__mulint_PARM_2 + 1),dph
      0000CC 90 03 E8         [24]  630 	mov	dptr,#0x03E8
      0000CF 12r00r00         [24]  631 	lcall	__mulint
      0000D2 AE 82            [24]  632 	mov	r6,dpl
      0000D4 AF 83            [24]  633 	mov	r7,dph
      0000D6 75*00 0A         [24]  634 	mov	__divuint_PARM_2,#0x0A
      0000D9 75*01 00         [24]  635 	mov	(__divuint_PARM_2 + 1),#0x00
      0000DC 85*0E 82         [24]  636 	mov	dpl,_time_mode0
      0000DF 85*0F 83         [24]  637 	mov	dph,(_time_mode0 + 1)
      0000E2 C0 07            [24]  638 	push	ar7
      0000E4 C0 06            [24]  639 	push	ar6
      0000E6 12r00r00         [24]  640 	lcall	__divuint
      0000E9 75*00 E8         [24]  641 	mov	__moduint_PARM_2,#0xE8
      0000EC 75*01 03         [24]  642 	mov	(__moduint_PARM_2 + 1),#0x03
      0000EF 12r00r00         [24]  643 	lcall	__moduint
      0000F2 AC 82            [24]  644 	mov	r4,dpl
      0000F4 AD 83            [24]  645 	mov	r5,dph
      0000F6 D0 06            [24]  646 	pop	ar6
      0000F8 D0 07            [24]  647 	pop	ar7
      0000FA EC               [12]  648 	mov	a,r4
      0000FB 2E               [12]  649 	add	a,r6
      0000FC F5*0C            [12]  650 	mov	_time_mode1,a
      0000FE ED               [12]  651 	mov	a,r5
      0000FF 3F               [12]  652 	addc	a,r7
      000100 F5*0D            [12]  653 	mov	(_time_mode1 + 1),a
      000102 80 27            [24]  654 	sjmp	00103$
      000104                        655 00102$:
                                    656 ;	src/main.c:185: factor = 1000;
      000104 75*0A E8         [24]  657 	mov	_factor,#0xE8
      000107 75*0B 03         [24]  658 	mov	(_factor + 1),#0x03
                                    659 ;	src/main.c:186: time_mode0 = (time_mode1 % 1000) * 10;
      00010A 75*00 E8         [24]  660 	mov	__moduint_PARM_2,#0xE8
      00010D 75*01 03         [24]  661 	mov	(__moduint_PARM_2 + 1),#0x03
      000110 85*0C 82         [24]  662 	mov	dpl,_time_mode1
      000113 85*0D 83         [24]  663 	mov	dph,(_time_mode1 + 1)
      000116 12r00r00         [24]  664 	lcall	__moduint
      000119 85 82*00         [24]  665 	mov	__mulint_PARM_2,dpl
      00011C 85 83*01         [24]  666 	mov	(__mulint_PARM_2 + 1),dph
      00011F 90 00 0A         [24]  667 	mov	dptr,#0x000A
      000122 12r00r00         [24]  668 	lcall	__mulint
      000125 85 82*0E         [24]  669 	mov	_time_mode0,dpl
      000128 85 83*0F         [24]  670 	mov	(_time_mode0 + 1),dph
      00012B                        671 00103$:
                                    672 ;	src/main.c:189: range_mode = mode_tmp;
      00012B A2*01            [12]  673 	mov	c,_mode_tmp
      00012D 92*00            [24]  674 	mov	_range_mode,c
      00012F                        675 00105$:
                                    676 ;	src/main.c:191: if (factor == 1000){
      00012F 74 E8            [12]  677 	mov	a,#0xE8
      000131 B5*0A 14         [24]  678 	cjne	a,_factor,00107$
      000134 74 03            [12]  679 	mov	a,#0x03
      000136 B5*0B 0F         [24]  680 	cjne	a,(_factor + 1),00107$
                                    681 ;	src/main.c:192: setDisplay(time_mode0, factor);
      000139 85*0A*1C         [24]  682 	mov	_setDisplay_PARM_2,_factor
      00013C 85*0B*1D         [24]  683 	mov	(_setDisplay_PARM_2 + 1),(_factor + 1)
      00013F 85*0E 82         [24]  684 	mov	dpl,_time_mode0
      000142 85*0F 83         [24]  685 	mov	dph,(_time_mode0 + 1)
      000145 02r01r57         [24]  686 	ljmp	_setDisplay
      000148                        687 00107$:
                                    688 ;	src/main.c:194: setDisplay(time_mode1, factor);
      000148 85*0A*1C         [24]  689 	mov	_setDisplay_PARM_2,_factor
      00014B 85*0B*1D         [24]  690 	mov	(_setDisplay_PARM_2 + 1),(_factor + 1)
      00014E 85*0C 82         [24]  691 	mov	dpl,_time_mode1
      000151 85*0D 83         [24]  692 	mov	dph,(_time_mode1 + 1)
      000154 02r01r57         [24]  693 	ljmp	_setDisplay
                                    694 ;------------------------------------------------------------
                                    695 ;Allocation info for local variables in function 'setDisplay'
                                    696 ;------------------------------------------------------------
                                    697 ;f                         Allocated with name '_setDisplay_PARM_2'
                                    698 ;number                    Allocated to registers r6 r7 
                                    699 ;------------------------------------------------------------
                                    700 ;	src/main.c:198: void setDisplay(unsigned int number, unsigned int f)
                                    701 ;	-----------------------------------------
                                    702 ;	 function setDisplay
                                    703 ;	-----------------------------------------
      000157                        704 _setDisplay:
                                    705 ;	src/main.c:200: digitVal_1 = number % 10;
      000157 AE 82            [24]  706 	mov	r6,dpl
      000159 AF 83            [24]  707 	mov	r7,dph
      00015B 75*00 0A         [24]  708 	mov	__moduint_PARM_2,#0x0A
      00015E 75*01 00         [24]  709 	mov	(__moduint_PARM_2 + 1),#0x00
      000161 C0 07            [24]  710 	push	ar7
      000163 C0 06            [24]  711 	push	ar6
      000165 12r00r00         [24]  712 	lcall	__moduint
      000168 85 82*10         [24]  713 	mov	_digitVal_1,dpl
      00016B 85 83*11         [24]  714 	mov	(_digitVal_1 + 1),dph
      00016E D0 06            [24]  715 	pop	ar6
      000170 D0 07            [24]  716 	pop	ar7
                                    717 ;	src/main.c:201: digitVal_2 = (number /10) % 10;
      000172 75*00 0A         [24]  718 	mov	__divuint_PARM_2,#0x0A
      000175 75*01 00         [24]  719 	mov	(__divuint_PARM_2 + 1),#0x00
      000178 8E 82            [24]  720 	mov	dpl,r6
      00017A 8F 83            [24]  721 	mov	dph,r7
      00017C C0 07            [24]  722 	push	ar7
      00017E C0 06            [24]  723 	push	ar6
      000180 12r00r00         [24]  724 	lcall	__divuint
      000183 75*00 0A         [24]  725 	mov	__moduint_PARM_2,#0x0A
      000186 75*01 00         [24]  726 	mov	(__moduint_PARM_2 + 1),#0x00
      000189 12r00r00         [24]  727 	lcall	__moduint
      00018C 85 82*12         [24]  728 	mov	_digitVal_2,dpl
      00018F 85 83*13         [24]  729 	mov	(_digitVal_2 + 1),dph
      000192 D0 06            [24]  730 	pop	ar6
      000194 D0 07            [24]  731 	pop	ar7
                                    732 ;	src/main.c:202: digitVal_3 = (number /100) % 10;
      000196 75*00 64         [24]  733 	mov	__divuint_PARM_2,#0x64
      000199 75*01 00         [24]  734 	mov	(__divuint_PARM_2 + 1),#0x00
      00019C 8E 82            [24]  735 	mov	dpl,r6
      00019E 8F 83            [24]  736 	mov	dph,r7
      0001A0 C0 07            [24]  737 	push	ar7
      0001A2 C0 06            [24]  738 	push	ar6
      0001A4 12r00r00         [24]  739 	lcall	__divuint
      0001A7 75*00 0A         [24]  740 	mov	__moduint_PARM_2,#0x0A
      0001AA 75*01 00         [24]  741 	mov	(__moduint_PARM_2 + 1),#0x00
      0001AD 12r00r00         [24]  742 	lcall	__moduint
      0001B0 85 82*14         [24]  743 	mov	_digitVal_3,dpl
      0001B3 85 83*15         [24]  744 	mov	(_digitVal_3 + 1),dph
      0001B6 D0 06            [24]  745 	pop	ar6
      0001B8 D0 07            [24]  746 	pop	ar7
                                    747 ;	src/main.c:203: if ((number < 1000) && (f !=1000)){
      0001BA C3               [12]  748 	clr	c
      0001BB EE               [12]  749 	mov	a,r6
      0001BC 94 E8            [12]  750 	subb	a,#0xE8
      0001BE EF               [12]  751 	mov	a,r7
      0001BF 94 03            [12]  752 	subb	a,#0x03
      0001C1 50 14            [24]  753 	jnc	00102$
      0001C3 74 E8            [12]  754 	mov	a,#0xE8
      0001C5 B5*1C 07         [24]  755 	cjne	a,_setDisplay_PARM_2,00137$
      0001C8 74 03            [12]  756 	mov	a,#0x03
      0001CA B5*1D 02         [24]  757 	cjne	a,(_setDisplay_PARM_2 + 1),00137$
      0001CD 80 08            [24]  758 	sjmp	00102$
      0001CF                        759 00137$:
                                    760 ;	src/main.c:204: digitVal_4 = 10; // mean do not display
      0001CF 75*16 0A         [24]  761 	mov	_digitVal_4,#0x0A
      0001D2 75*17 00         [24]  762 	mov	(_digitVal_4 + 1),#0x00
      0001D5 80 1C            [24]  763 	sjmp	00103$
      0001D7                        764 00102$:
                                    765 ;	src/main.c:206: digitVal_4 = (number /1000) % 10;
      0001D7 75*00 E8         [24]  766 	mov	__divuint_PARM_2,#0xE8
      0001DA 75*01 03         [24]  767 	mov	(__divuint_PARM_2 + 1),#0x03
      0001DD 8E 82            [24]  768 	mov	dpl,r6
      0001DF 8F 83            [24]  769 	mov	dph,r7
      0001E1 12r00r00         [24]  770 	lcall	__divuint
      0001E4 75*00 0A         [24]  771 	mov	__moduint_PARM_2,#0x0A
      0001E7 75*01 00         [24]  772 	mov	(__moduint_PARM_2 + 1),#0x00
      0001EA 12r00r00         [24]  773 	lcall	__moduint
      0001ED 85 82*16         [24]  774 	mov	_digitVal_4,dpl
      0001F0 85 83*17         [24]  775 	mov	(_digitVal_4 + 1),dph
      0001F3                        776 00103$:
                                    777 ;	src/main.c:209: if (f == 1){
      0001F3 74 01            [12]  778 	mov	a,#0x01
      0001F5 B5*1C 06         [24]  779 	cjne	a,_setDisplay_PARM_2,00138$
      0001F8 E4               [12]  780 	clr	a
      0001F9 B5*1D 02         [24]  781 	cjne	a,(_setDisplay_PARM_2 + 1),00138$
      0001FC 80 02            [24]  782 	sjmp	00139$
      0001FE                        783 00138$:
      0001FE 80 06            [24]  784 	sjmp	00114$
      000200                        785 00139$:
                                    786 ;	src/main.c:210: pointIdx = 0;
      000200 E4               [12]  787 	clr	a
      000201 F5*18            [12]  788 	mov	_pointIdx,a
      000203 F5*19            [12]  789 	mov	(_pointIdx + 1),a
      000205 22               [24]  790 	ret
      000206                        791 00114$:
                                    792 ;	src/main.c:211: } else if (f == 10) {
      000206 74 0A            [12]  793 	mov	a,#0x0A
      000208 B5*1C 06         [24]  794 	cjne	a,_setDisplay_PARM_2,00140$
      00020B E4               [12]  795 	clr	a
      00020C B5*1D 02         [24]  796 	cjne	a,(_setDisplay_PARM_2 + 1),00140$
      00020F 80 02            [24]  797 	sjmp	00141$
      000211                        798 00140$:
      000211 80 07            [24]  799 	sjmp	00111$
      000213                        800 00141$:
                                    801 ;	src/main.c:212: pointIdx = 2;
      000213 75*18 02         [24]  802 	mov	_pointIdx,#0x02
      000216 75*19 00         [24]  803 	mov	(_pointIdx + 1),#0x00
      000219 22               [24]  804 	ret
      00021A                        805 00111$:
                                    806 ;	src/main.c:213: } else if (f == 100) {
      00021A 74 64            [12]  807 	mov	a,#0x64
      00021C B5*1C 06         [24]  808 	cjne	a,_setDisplay_PARM_2,00142$
      00021F E4               [12]  809 	clr	a
      000220 B5*1D 02         [24]  810 	cjne	a,(_setDisplay_PARM_2 + 1),00142$
      000223 80 02            [24]  811 	sjmp	00143$
      000225                        812 00142$:
      000225 80 07            [24]  813 	sjmp	00108$
      000227                        814 00143$:
                                    815 ;	src/main.c:214: pointIdx = 3;
      000227 75*18 03         [24]  816 	mov	_pointIdx,#0x03
      00022A 75*19 00         [24]  817 	mov	(_pointIdx + 1),#0x00
      00022D 22               [24]  818 	ret
      00022E                        819 00108$:
                                    820 ;	src/main.c:215: } else if (f == 1000) {
      00022E 74 E8            [12]  821 	mov	a,#0xE8
      000230 B5*1C 0B         [24]  822 	cjne	a,_setDisplay_PARM_2,00116$
      000233 74 03            [12]  823 	mov	a,#0x03
      000235 B5*1D 06         [24]  824 	cjne	a,(_setDisplay_PARM_2 + 1),00116$
                                    825 ;	src/main.c:216: pointIdx = 4;
      000238 75*18 04         [24]  826 	mov	_pointIdx,#0x04
      00023B 75*19 00         [24]  827 	mov	(_pointIdx + 1),#0x00
      00023E                        828 00116$:
      00023E 22               [24]  829 	ret
                                    830 ;------------------------------------------------------------
                                    831 ;Allocation info for local variables in function 'display'
                                    832 ;------------------------------------------------------------
                                    833 ;	src/main.c:220: void display(void)
                                    834 ;	-----------------------------------------
                                    835 ;	 function display
                                    836 ;	-----------------------------------------
      00023F                        837 _display:
                                    838 ;	src/main.c:222: LED7_1 = 1;
      00023F D2 B5            [12]  839 	setb	_P3_5
                                    840 ;	src/main.c:223: LED7_2 = 1;
      000241 D2 B4            [12]  841 	setb	_P3_4
                                    842 ;	src/main.c:224: LED7_3 = 1;
      000243 D2 B3            [12]  843 	setb	_P3_3
                                    844 ;	src/main.c:225: LED7_4 = 1;
      000245 D2 B2            [12]  845 	setb	_P3_2
                                    846 ;	src/main.c:226: switch (digitIdx) {
      000247 C3               [12]  847 	clr	c
      000248 74 04            [12]  848 	mov	a,#0x04
      00024A 95*1A            [12]  849 	subb	a,_digitIdx
      00024C E4               [12]  850 	clr	a
      00024D 95*1B            [12]  851 	subb	a,(_digitIdx + 1)
      00024F 50 03            [24]  852 	jnc	00142$
      000251 02r02rDE         [24]  853 	ljmp	00115$
      000254                        854 00142$:
      000254 E5*1A            [12]  855 	mov	a,_digitIdx
      000256 75 F0 03         [24]  856 	mov	b,#0x03
      000259 A4               [48]  857 	mul	ab
      00025A 90r02r5E         [24]  858 	mov	dptr,#00143$
      00025D 73               [24]  859 	jmp	@a+dptr
      00025E                        860 00143$:
      00025E 02r02rDE         [24]  861 	ljmp	00115$
      000261 02r02r6D         [24]  862 	ljmp	00101$
      000264 02r02r87         [24]  863 	ljmp	00104$
      000267 02r02rA1         [24]  864 	ljmp	00107$
      00026A 02r02rBB         [24]  865 	ljmp	00110$
                                    866 ;	src/main.c:227: case 1: {
      00026D                        867 00101$:
                                    868 ;	src/main.c:228: P1 = led7[digitVal_1];
      00026D E5*10            [12]  869 	mov	a,_digitVal_1
      00026F 24r00            [12]  870 	add	a,#_led7
      000271 F9               [12]  871 	mov	r1,a
      000272 87 90            [24]  872 	mov	_P1,@r1
                                    873 ;	src/main.c:229: if (pointIdx == 1){
      000274 74 01            [12]  874 	mov	a,#0x01
      000276 B5*18 06         [24]  875 	cjne	a,_pointIdx,00144$
      000279 E4               [12]  876 	clr	a
      00027A B5*19 02         [24]  877 	cjne	a,(_pointIdx + 1),00144$
      00027D 80 02            [24]  878 	sjmp	00145$
      00027F                        879 00144$:
      00027F 80 02            [24]  880 	sjmp	00103$
      000281                        881 00145$:
                                    882 ;	src/main.c:230: LED7DP = 0;
      000281 C2 97            [12]  883 	clr	_P1_7
      000283                        884 00103$:
                                    885 ;	src/main.c:232: LED7_1 = 0;
      000283 C2 B5            [12]  886 	clr	_P3_5
                                    887 ;	src/main.c:233: break;
                                    888 ;	src/main.c:235: case 2: {
      000285 80 57            [24]  889 	sjmp	00115$
      000287                        890 00104$:
                                    891 ;	src/main.c:236: P1 = led7[digitVal_2];
      000287 E5*12            [12]  892 	mov	a,_digitVal_2
      000289 24r00            [12]  893 	add	a,#_led7
      00028B F9               [12]  894 	mov	r1,a
      00028C 87 90            [24]  895 	mov	_P1,@r1
                                    896 ;	src/main.c:237: if (pointIdx == 2){
      00028E 74 02            [12]  897 	mov	a,#0x02
      000290 B5*18 06         [24]  898 	cjne	a,_pointIdx,00146$
      000293 E4               [12]  899 	clr	a
      000294 B5*19 02         [24]  900 	cjne	a,(_pointIdx + 1),00146$
      000297 80 02            [24]  901 	sjmp	00147$
      000299                        902 00146$:
      000299 80 02            [24]  903 	sjmp	00106$
      00029B                        904 00147$:
                                    905 ;	src/main.c:238: LED7DP = 0;
      00029B C2 97            [12]  906 	clr	_P1_7
      00029D                        907 00106$:
                                    908 ;	src/main.c:240: LED7_2 = 0;
      00029D C2 B4            [12]  909 	clr	_P3_4
                                    910 ;	src/main.c:241: break;
                                    911 ;	src/main.c:243: case 3: {
      00029F 80 3D            [24]  912 	sjmp	00115$
      0002A1                        913 00107$:
                                    914 ;	src/main.c:244: P1 = led7[digitVal_3];
      0002A1 E5*14            [12]  915 	mov	a,_digitVal_3
      0002A3 24r00            [12]  916 	add	a,#_led7
      0002A5 F9               [12]  917 	mov	r1,a
      0002A6 87 90            [24]  918 	mov	_P1,@r1
                                    919 ;	src/main.c:245: if (pointIdx == 3){
      0002A8 74 03            [12]  920 	mov	a,#0x03
      0002AA B5*18 06         [24]  921 	cjne	a,_pointIdx,00148$
      0002AD E4               [12]  922 	clr	a
      0002AE B5*19 02         [24]  923 	cjne	a,(_pointIdx + 1),00148$
      0002B1 80 02            [24]  924 	sjmp	00149$
      0002B3                        925 00148$:
      0002B3 80 02            [24]  926 	sjmp	00109$
      0002B5                        927 00149$:
                                    928 ;	src/main.c:246: LED7DP = 0;
      0002B5 C2 97            [12]  929 	clr	_P1_7
      0002B7                        930 00109$:
                                    931 ;	src/main.c:248: LED7_3 = 0;
      0002B7 C2 B3            [12]  932 	clr	_P3_3
                                    933 ;	src/main.c:249: break;
                                    934 ;	src/main.c:251: case 4: {
      0002B9 80 23            [24]  935 	sjmp	00115$
      0002BB                        936 00110$:
                                    937 ;	src/main.c:252: if (digitVal_4 == 10) break;
      0002BB 74 0A            [12]  938 	mov	a,#0x0A
      0002BD B5*16 06         [24]  939 	cjne	a,_digitVal_4,00150$
      0002C0 E4               [12]  940 	clr	a
      0002C1 B5*17 02         [24]  941 	cjne	a,(_digitVal_4 + 1),00150$
      0002C4 80 18            [24]  942 	sjmp	00115$
      0002C6                        943 00150$:
                                    944 ;	src/main.c:253: P1 = led7[digitVal_4];
      0002C6 E5*16            [12]  945 	mov	a,_digitVal_4
      0002C8 24r00            [12]  946 	add	a,#_led7
      0002CA F9               [12]  947 	mov	r1,a
      0002CB 87 90            [24]  948 	mov	_P1,@r1
                                    949 ;	src/main.c:254: if (pointIdx == 4){
      0002CD 74 04            [12]  950 	mov	a,#0x04
      0002CF B5*18 06         [24]  951 	cjne	a,_pointIdx,00151$
      0002D2 E4               [12]  952 	clr	a
      0002D3 B5*19 02         [24]  953 	cjne	a,(_pointIdx + 1),00151$
      0002D6 80 02            [24]  954 	sjmp	00152$
      0002D8                        955 00151$:
      0002D8 80 02            [24]  956 	sjmp	00114$
      0002DA                        957 00152$:
                                    958 ;	src/main.c:255: LED7DP = 0;
      0002DA C2 97            [12]  959 	clr	_P1_7
      0002DC                        960 00114$:
                                    961 ;	src/main.c:257: LED7_4 = 0;	
      0002DC C2 B2            [12]  962 	clr	_P3_2
                                    963 ;	src/main.c:260: }
      0002DE                        964 00115$:
                                    965 ;	src/main.c:262: if (digitIdx == 4) {
      0002DE 74 04            [12]  966 	mov	a,#0x04
      0002E0 B5*1A 06         [24]  967 	cjne	a,_digitIdx,00153$
      0002E3 E4               [12]  968 	clr	a
      0002E4 B5*1B 02         [24]  969 	cjne	a,(_digitIdx + 1),00153$
      0002E7 80 02            [24]  970 	sjmp	00154$
      0002E9                        971 00153$:
      0002E9 80 07            [24]  972 	sjmp	00117$
      0002EB                        973 00154$:
                                    974 ;	src/main.c:263: digitIdx = 1;
      0002EB 75*1A 01         [24]  975 	mov	_digitIdx,#0x01
      0002EE 75*1B 00         [24]  976 	mov	(_digitIdx + 1),#0x00
      0002F1 22               [24]  977 	ret
      0002F2                        978 00117$:
                                    979 ;	src/main.c:265: digitIdx++;
      0002F2 05*1A            [12]  980 	inc	_digitIdx
      0002F4 E4               [12]  981 	clr	a
      0002F5 B5*1A 02         [24]  982 	cjne	a,_digitIdx,00155$
      0002F8 05*1B            [12]  983 	inc	(_digitIdx + 1)
      0002FA                        984 00155$:
      0002FA 22               [24]  985 	ret
                                    986 ;------------------------------------------------------------
                                    987 ;Allocation info for local variables in function 'delay_ms'
                                    988 ;------------------------------------------------------------
                                    989 ;itime                     Allocated to registers r6 r7 
                                    990 ;i                         Allocated to registers r4 r5 
                                    991 ;j                         Allocated to registers r2 r3 
                                    992 ;d                         Allocated to registers 
                                    993 ;------------------------------------------------------------
                                    994 ;	src/main.c:269: void delay_ms(unsigned int itime)
                                    995 ;	-----------------------------------------
                                    996 ;	 function delay_ms
                                    997 ;	-----------------------------------------
      0002FB                        998 _delay_ms:
      0002FB AE 82            [24]  999 	mov	r6,dpl
      0002FD AF 83            [24] 1000 	mov	r7,dph
                                   1001 ;	src/main.c:273: for (i=0;i < itime;i++) {
      0002FF 7C 00            [12] 1002 	mov	r4,#0x00
      000301 7D 00            [12] 1003 	mov	r5,#0x00
      000303                       1004 00107$:
      000303 C3               [12] 1005 	clr	c
      000304 EC               [12] 1006 	mov	a,r4
      000305 9E               [12] 1007 	subb	a,r6
      000306 ED               [12] 1008 	mov	a,r5
      000307 9F               [12] 1009 	subb	a,r7
      000308 50 1B            [24] 1010 	jnc	00109$
                                   1011 ;	src/main.c:274: for(j=0;j<500;j++) {
      00030A 7A F4            [12] 1012 	mov	r2,#0xF4
      00030C 7B 01            [12] 1013 	mov	r3,#0x01
      00030E                       1014 00105$:
                                   1015 ;	src/main.c:275: d=0;
      00030E EA               [12] 1016 	mov	a,r2
      00030F 24 FF            [12] 1017 	add	a,#0xFF
      000311 F8               [12] 1018 	mov	r0,a
      000312 EB               [12] 1019 	mov	a,r3
      000313 34 FF            [12] 1020 	addc	a,#0xFF
      000315 F9               [12] 1021 	mov	r1,a
      000316 88 02            [24] 1022 	mov	ar2,r0
      000318 89 03            [24] 1023 	mov	ar3,r1
                                   1024 ;	src/main.c:274: for(j=0;j<500;j++) {
      00031A E8               [12] 1025 	mov	a,r0
      00031B 49               [12] 1026 	orl	a,r1
      00031C 70 F0            [24] 1027 	jnz	00105$
                                   1028 ;	src/main.c:273: for (i=0;i < itime;i++) {
      00031E 0C               [12] 1029 	inc	r4
      00031F BC 00 E1         [24] 1030 	cjne	r4,#0x00,00107$
      000322 0D               [12] 1031 	inc	r5
      000323 80 DE            [24] 1032 	sjmp	00107$
      000325                       1033 00109$:
      000325 22               [24] 1034 	ret
                                   1035 ;------------------------------------------------------------
                                   1036 ;Allocation info for local variables in function 'ISR_ET0'
                                   1037 ;------------------------------------------------------------
                                   1038 ;	src/main.c:281: void ISR_ET0 (void) __interrupt 1
                                   1039 ;	-----------------------------------------
                                   1040 ;	 function ISR_ET0
                                   1041 ;	-----------------------------------------
      000326                       1042 _ISR_ET0:
      000326 C0 E0            [24] 1043 	push	acc
      000328 C0 D0            [24] 1044 	push	psw
                                   1045 ;	src/main.c:283: if (COM == 1){
      00032A 30 B1 4C         [24] 1046 	jnb	_P3_1,00110$
                                   1047 ;	src/main.c:284: if (range_mode == 1) {
      00032D 30*00 10         [24] 1048 	jnb	_range_mode,00106$
                                   1049 ;	src/main.c:285: time_mode1++;
      000330 05*0C            [12] 1050 	inc	_time_mode1
      000332 E4               [12] 1051 	clr	a
      000333 B5*0C 02         [24] 1052 	cjne	a,_time_mode1,00126$
      000336 05*0D            [12] 1053 	inc	(_time_mode1 + 1)
      000338                       1054 00126$:
                                   1055 ;	src/main.c:286: TH0 = 0xD8;
      000338 75 8C D8         [24] 1056 	mov	_TH0,#0xD8
                                   1057 ;	src/main.c:287: TL0 = 0xF0;
      00033B 75 8A F0         [24] 1058 	mov	_TL0,#0xF0
      00033E 80 39            [24] 1059 	sjmp	00110$
      000340                       1060 00106$:
                                   1061 ;	src/main.c:289: time_mode0++;
      000340 05*0E            [12] 1062 	inc	_time_mode0
      000342 E4               [12] 1063 	clr	a
      000343 B5*0E 02         [24] 1064 	cjne	a,_time_mode0,00127$
      000346 05*0F            [12] 1065 	inc	(_time_mode0 + 1)
      000348                       1066 00127$:
                                   1067 ;	src/main.c:290: if (time_mode0 == 10000) {
      000348 74 10            [12] 1068 	mov	a,#0x10
      00034A B5*0E 26         [24] 1069 	cjne	a,_time_mode0,00104$
      00034D 74 27            [12] 1070 	mov	a,#0x27
      00034F B5*0F 21         [24] 1071 	cjne	a,(_time_mode0 + 1),00104$
                                   1072 ;	src/main.c:291: time_mode0 = 0;
      000352 E4               [12] 1073 	clr	a
      000353 F5*0E            [12] 1074 	mov	_time_mode0,a
      000355 F5*0F            [12] 1075 	mov	(_time_mode0 + 1),a
                                   1076 ;	src/main.c:292: time_mode1 += 1000; 
      000357 74 E8            [12] 1077 	mov	a,#0xE8
      000359 25*0C            [12] 1078 	add	a,_time_mode1
      00035B F5*0C            [12] 1079 	mov	_time_mode1,a
      00035D 74 03            [12] 1080 	mov	a,#0x03
      00035F 35*0D            [12] 1081 	addc	a,(_time_mode1 + 1)
      000361 F5*0D            [12] 1082 	mov	(_time_mode1 + 1),a
                                   1083 ;	src/main.c:293: if (time_mode1 >= 10000) {
      000363 C3               [12] 1084 	clr	c
      000364 E5*0C            [12] 1085 	mov	a,_time_mode1
      000366 94 10            [12] 1086 	subb	a,#0x10
      000368 E5*0D            [12] 1087 	mov	a,(_time_mode1 + 1)
      00036A 94 27            [12] 1088 	subb	a,#0x27
      00036C 40 05            [24] 1089 	jc	00104$
                                   1090 ;	src/main.c:294: time_mode1 = 0;
      00036E E4               [12] 1091 	clr	a
      00036F F5*0C            [12] 1092 	mov	_time_mode1,a
      000371 F5*0D            [12] 1093 	mov	(_time_mode1 + 1),a
      000373                       1094 00104$:
                                   1095 ;	src/main.c:297: TH0 = 0xFC;
      000373 75 8C FC         [24] 1096 	mov	_TH0,#0xFC
                                   1097 ;	src/main.c:298: TL0 = 0x2F;
      000376 75 8A 2F         [24] 1098 	mov	_TL0,#0x2F
      000379                       1099 00110$:
      000379 D0 D0            [24] 1100 	pop	psw
      00037B D0 E0            [24] 1101 	pop	acc
      00037D 32               [24] 1102 	reti
                                   1103 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1104 ;	eliminated unneeded push/pop dpl
                                   1105 ;	eliminated unneeded push/pop dph
                                   1106 ;	eliminated unneeded push/pop b
                                   1107 ;------------------------------------------------------------
                                   1108 ;Allocation info for local variables in function 'ISR_ET1'
                                   1109 ;------------------------------------------------------------
                                   1110 ;	src/main.c:304: void ISR_ET1 (void) __interrupt 3 
                                   1111 ;	-----------------------------------------
                                   1112 ;	 function ISR_ET1
                                   1113 ;	-----------------------------------------
      00037E                       1114 _ISR_ET1:
      00037E C0*00            [24] 1115 	push	bits
      000380 C0 E0            [24] 1116 	push	acc
      000382 C0 F0            [24] 1117 	push	b
      000384 C0 82            [24] 1118 	push	dpl
      000386 C0 83            [24] 1119 	push	dph
      000388 C0 07            [24] 1120 	push	(0+7)
      00038A C0 06            [24] 1121 	push	(0+6)
      00038C C0 05            [24] 1122 	push	(0+5)
      00038E C0 04            [24] 1123 	push	(0+4)
      000390 C0 03            [24] 1124 	push	(0+3)
      000392 C0 02            [24] 1125 	push	(0+2)
      000394 C0 01            [24] 1126 	push	(0+1)
      000396 C0 00            [24] 1127 	push	(0+0)
      000398 C0 D0            [24] 1128 	push	psw
      00039A 75 D0 00         [24] 1129 	mov	psw,#0x00
                                   1130 ;	src/main.c:306: update();
      00039D 12r00r9A         [24] 1131 	lcall	_update
                                   1132 ;	src/main.c:307: display();
      0003A0 12r02r3F         [24] 1133 	lcall	_display
                                   1134 ;	src/main.c:308: TH1 = 0xF8;      //Nap gia tri bat dau 8bit
      0003A3 75 8D F8         [24] 1135 	mov	_TH1,#0xF8
                                   1136 ;	src/main.c:309: TL1 = 0x30;
      0003A6 75 8B 30         [24] 1137 	mov	_TL1,#0x30
      0003A9 D0 D0            [24] 1138 	pop	psw
      0003AB D0 00            [24] 1139 	pop	(0+0)
      0003AD D0 01            [24] 1140 	pop	(0+1)
      0003AF D0 02            [24] 1141 	pop	(0+2)
      0003B1 D0 03            [24] 1142 	pop	(0+3)
      0003B3 D0 04            [24] 1143 	pop	(0+4)
      0003B5 D0 05            [24] 1144 	pop	(0+5)
      0003B7 D0 06            [24] 1145 	pop	(0+6)
      0003B9 D0 07            [24] 1146 	pop	(0+7)
      0003BB D0 83            [24] 1147 	pop	dph
      0003BD D0 82            [24] 1148 	pop	dpl
      0003BF D0 F0            [24] 1149 	pop	b
      0003C1 D0 E0            [24] 1150 	pop	acc
      0003C3 D0*00            [24] 1151 	pop	bits
      0003C5 32               [24] 1152 	reti
                                   1153 	.area CSEG    (CODE)
                                   1154 	.area CONST   (CODE)
                                   1155 	.area XINIT   (CODE)
                                   1156 	.area CABS    (ABS,CODE)
